#!/usr/bin/env python3
"""
Demonstration script to show verbose vs quiet logging modes
for the Ropes & Ladders game with Minimax AI.

This helps explain the core concept without all the detailed logs.
"""

from ropes_ladders_game import GameState, OptimizedMinimaxAgent
from minimax_pruning import MinimaxPruning

def demo_verbose_mode():
    """Demonstrate with full verbose logging"""
    print("=" * 60)
    print("üîä VERBOSE MODE - Full detailed logging")
    print("=" * 60)
    
    # Create game with verbose=True (default)
    game = GameState(board_size=7, max_ropes=2, verbose=True)
    ai = MinimaxPruning(max_depth=3, verbose=True)
    
    # Get one AI move to show all the detailed output
    actions = game.get_possible_actions()
    if actions:
        print("\nü§ñ AI is making a move...")
        best_action = ai.get_best_move(game)
        print(f"‚úÖ AI chose: {best_action['description']}")

def demo_quiet_mode():
    """Demonstrate with minimal logging for cleaner explanation"""
    print("\n" + "=" * 60)
    print("üîá QUIET MODE - Minimal logging for clean demonstration")
    print("=" * 60)
    
    # Create game with verbose=False
    game = GameState(board_size=7, max_ropes=2, verbose=False)
    ai = MinimaxPruning(max_depth=3, verbose=False)
    
    # Get one AI move with minimal output
    actions = game.get_possible_actions()
    if actions:
        print("\nü§ñ AI is making a move (quiet mode)...")
        best_action = ai.get_best_move(game)
        print(f"‚úÖ AI chose: {best_action['description']}")
        
        # Manually show key information without noise
        print(f"   üìä Nodes evaluated: {ai.nodes_evaluated}")
        print(f"   ‚úÇÔ∏è Alpha-Beta prunings: {ai.pruning_count}")
        print(f"   üß† Cached positions: {len(ai.transposition_table)}")

def explain_minimax_concept():
    """Explain the minimax algorithm in simple terms"""
    print("\n" + "=" * 60)
    print("üß† MINIMAX ALGORITHM EXPLANATION")
    print("=" * 60)
    
    print("""
üéØ What is Minimax?
   ‚Ä¢ AI looks ahead several moves into the future
   ‚Ä¢ Assumes both players play optimally
   ‚Ä¢ Maximizes its own score, minimizes opponent's score

üå≥ How it works:
   1. Generate a tree of all possible future game states
   2. Evaluate each leaf position with a scoring function
   3. Propagate scores back up the tree
   4. Choose the move leading to the best guaranteed outcome

‚úÇÔ∏è Alpha-Beta Pruning:
   ‚Ä¢ Optimization that cuts unnecessary branches
   ‚Ä¢ If we find a move that's worse than what we already have,
     stop exploring that branch
   ‚Ä¢ Can reduce search space by 50-90%

‚ö° Iterative Deepening:
   ‚Ä¢ Start with depth 1, then 2, then 3, etc.
   ‚Ä¢ Always have a "best move so far" even if time runs out
   ‚Ä¢ Deeper search = better play, but takes more time

üé≤ In Ropes & Ladders:
   ‚Ä¢ Evaluates: distance to goal, ladder positions, rope threats
   ‚Ä¢ Considers: offensive moves, defensive rope placement
   ‚Ä¢ Plans: multi-step combinations of moves and rope usage
    """)

if __name__ == "__main__":
    print("üéÆ Ropes & Ladders - Minimax AI Demonstration")
    
    # Show both modes
    demo_verbose_mode()
    demo_quiet_mode()
    
    # Explain the concept
    explain_minimax_concept()
    
    print("\n" + "=" * 60)
    print("üí° For your video demonstration:")
    print("   ‚Ä¢ Use quiet mode (verbose=False) for cleaner terminal")
    print("   ‚Ä¢ Manually explain key concepts without log noise")
    print("   ‚Ä¢ Show specific statistics when relevant")
    print("   ‚Ä¢ Focus on strategic decisions rather than debug output")
    print("=" * 60) 